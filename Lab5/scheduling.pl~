% Test run (tested with SWI-Prolog)
%	
%	-----
%	| B |
%	-----
%	| A |
%	-----
%	
% ?- schedule([container(a,2,3),container(b,4,4)],[on(b,a)],[]).
% result -> [task(0,4,_20077,4,b),task(_11795,3,_20055,2,a)]
%	    (Start,Duration,End,Resources,Name)
%	    [task(0,4,4,4,b),task(0,3,7,2,a)]
%	    true
% The biggest of the Ends is the time that takes to unload the containers, in this case is 7



:- use_module(library(clpfd)).

% schedule( Containers, Constraints, Tasks)
% Containers -> list of container(A,B,C)
% Constraints -> list of constraints(A,B)
% Tasks -> Empty list
schedule(Containers, Constraints, Tasks) :- 
    addTasks(Containers, Constraints, Tasks).

schedule(Constraints, Tasks) :- 
    write(Tasks), nl,
    write('(Start,Duration,End,Resources,Name)'), nl,
    cumulative(Tasks, [limit(4)]),
    write(Tasks),nl.

% addTasks(Containers,Constrains,Task)
% Containers-> List of Containers
% Constraints -> List of Constraints
% Task -> List of tasks
% Appends the tasks based on the containers and the constraints that have been defined in the query
addTasks([] , Constraints , Task) :- schedule([],Task).
addTasks([Container | Containers], Constraints, Task) :- 
    addContainer(Container, B, M, D),
    checkConstraints(B, Containers, Constraints, StartTime),
    append([task( StartTime, D, _, M, B )],Task, Tasks),
    addTasks(Containers, Constraints, Tasks).
    
addContainer(container(B,M,D), B, M, D). 
addConstraint(on(A,B), A,B).

% Check the duration of the unloading of the container in order to assign the dependant container the start time.
checkDuration([],X,Duration).
checkDuration([container(B,M,D) | Containers], X, Duration) :-
    X == B,
    Duration is D + 0;
    X \== B, 
    Duration is 0 + 0,
    checkDuration(Containers, X, Duration).

checkConstraints(B, Containers, [], StartTime).
checkConstraints(B, [], Constraints, StartTime) :- 
    StartTime is 0 + 0.

% Check the constraints for the container that is being appended to the task list
checkConstraints(B, [Container | Containers], [Constraint | Constraints], StartTime) :- 
    addConstraint(Constraint , X , Y),
    B == Y,
    checkDuration([Container | Containers], X, Duration),
    StartTime is 0 + Duration;
    checkConstraints(B,  Containers, Constraints, StartTime).

    
